<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    Carlaware Chassis
    =================
    1) Carla Sensors
        This includes the sensor converters for data from Carla to Autoware
    2) PointCloud Container
        Composable Node
    3) Global Parameters
        Set 'use_sim_time' to 'True'
    4) Autoware Sensing
        Launch sensor_kit
    5) Vehicle
        URDF Transform Tree
-->
<launch>
    <!-- Essential parameters -->
    <arg name="map_path" default="$(env CWR_MAP_PATH)" description="point cloud and lanelet2 map directory path"/>
    <arg name="vehicle_model" default="$(env CWR_VEHICLE_MODEL)" description="vehicle model name"/>
    <arg name="sensor_model" default="$(env CWR_SENSOR_MODEL)" description="sensor model name"/>
    <arg name="data_path" default="$(env CWR_DATA_PATH)" description="packages data and artifacts directory path" />
    <arg name="pointcloud_container_name" default="pointcloud_container"/>

    <!-- Optional parameters -->
    <!-- Modules to be launched -->
    <arg name="launch_vehicle" default="true" description="launch vehicle"/>
    <arg name="launch_sensing" default="true" description="launch sensing"/>
    <arg name="launch_sensing_driver" default="true" description="launch sensing driver"/>
    <!-- Global parameters -->
    <arg name="use_sim_time" value="true"/>
    <!-- Vehicle -->
    <arg name="vehicle_id" default="$(env VEHICLE_ID default)" description="vehicle specific ID"/>
    <arg name="launch_vehicle_interface" default="false" description="launch vehicle interface"/>
    <!-- Auto mode setting-->
    <arg name="enable_all_modules_auto_mode" default="false" description="enable all module's auto mode"/>
    <arg name="is_simulation" default="$(env CWR_SIMULATION)" description="Autoware's behavior will change depending on whether this is a simulation or not."/>

    <!-- Open Planner Sensor Data Converters -->
    <group if="$(var launch_sensing)">
        <node pkg="carla_pointcloud" exec="carla_pointcloud_node" name="carla_pointcloud_interface" output="screen"/>
        <node pkg="op_fix2pose" exec="op_fix2pose_node" name="op_fix2pose_interface" output="screen"/>
    </group> 

    <!-- Global parameters -->
    <group scoped="false">
        <include file="$(find-pkg-share global_parameter_loader)/launch/global_params.launch.py">
            <arg name="use_sim_time" value="$(var use_sim_time)"/>
            <arg name="vehicle_model" value="$(var vehicle_model)"/>
        </include>
    </group>

    <!-- Pointcloud container -->
    <group if="$(var launch_sensing_driver)">
        <include file="$(find-pkg-share autoware_launch)/launch/pointcloud_container.launch.py">
            <arg name="use_multithread" value="true"/>
            <arg name="container_name" value="$(var pointcloud_container_name)"/>
        </include>
    </group>

    <!-- Sensing -->
    <group if="$(var launch_sensing)">
        <include file="$(find-pkg-share autoware_launch)/launch/components/tier4_sensing_component.launch.xml"/>
    </group>

    <!-- Vehicle -->
    <group if="$(var launch_vehicle)">
        <include file="$(find-pkg-share tier4_vehicle_launch)/launch/vehicle.launch.xml">
        <arg name="vehicle_model" value="$(var vehicle_model)"/>
        <arg name="sensor_model" value="$(var sensor_model)"/>
        <arg name="vehicle_id" value="$(var vehicle_id)"/>
        <arg name="launch_vehicle_interface" value="$(var launch_vehicle_interface)"/>
        <arg name="config_dir" value="$(find-pkg-share individual_params)/config/$(var vehicle_id)/$(var sensor_model)"/>
        <arg name="raw_vehicle_cmd_converter_param_path" value="$(find-pkg-share autoware_launch)/config/vehicle/raw_vehicle_cmd_converter/raw_vehicle_cmd_converter.param.yaml"/>
        </include>
    </group>
</launch>
